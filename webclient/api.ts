// tslint:disable
/**
 * JavaRestaurant API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    housenumber?: number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    street?: string;
}
/**
 * 
 * @export
 * @interface Meal
 */
export interface Meal {
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Meal
     */
    restaurantID?: number;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    img?: string;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Meal
     */
    price?: string;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    mealID?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    numItems?: number;
}
/**
 * 
 * @export
 * @interface Restaurant
 */
export interface Restaurant {
    /**
     * 
     * @type {number}
     * @memberof Restaurant
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Restaurant
     */
    ownerID?: number;
    /**
     * 
     * @type {string}
     * @memberof Restaurant
     */
    img?: string;
    /**
     * 
     * @type {Array<Meal>}
     * @memberof Restaurant
     */
    meals?: Array<Meal>;
    /**
     * 
     * @type {string}
     * @memberof Restaurant
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {Array<Address>}
     * @memberof User
     */
    addresses?: Array<Address>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstname?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    isRestaurantOwner?: boolean;
    /**
     * 
     * @type {Array<Restaurant>}
     * @memberof User
     */
    ownedRestaurants?: Array<Restaurant>;
}

/**
 * CartApi - axios parameter creator
 * @export
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Should only be carried by restaurant owner, and be logged in
         * @summary Confirm the orders
         * @param {number} [addressID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCart(addressID?: number, options: any = {}): RequestArgs {
            const localVarPath = `/cart/confirm`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (addressID !== undefined) {
                localVarQueryParameter['addressID'] = addressID;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary empty the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCart(options: any = {}): RequestArgs {
            const localVarPath = `/cart`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(options: any = {}): RequestArgs {
            const localVarPath = `/cart`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 * @export
 */
export const CartApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Should only be carried by restaurant owner, and be logged in
         * @summary Confirm the orders
         * @param {number} [addressID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCart(addressID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).confirmCart(addressID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary empty the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCart(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).deleteCart(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Order>> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).getCart(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CartApi - factory interface
 * @export
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Should only be carried by restaurant owner, and be logged in
         * @summary Confirm the orders
         * @param {number} [addressID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCart(addressID?: number, options?: any) {
            return CartApiFp(configuration).confirmCart(addressID, options)(axios, basePath);
        },
        /**
         * 
         * @summary empty the cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCart(options?: any) {
            return CartApiFp(configuration).deleteCart(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get all orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart(options?: any) {
            return CartApiFp(configuration).getCart(options)(axios, basePath);
        },
    };
};

/**
 * CartApi - object-oriented interface
 * @export
 * @class CartApi
 * @extends {BaseAPI}
 */
export class CartApi extends BaseAPI {
    /**
     * Should only be carried by restaurant owner, and be logged in
     * @summary Confirm the orders
     * @param {number} [addressID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public confirmCart(addressID?: number, options?: any) {
        return CartApiFp(this.configuration).confirmCart(addressID, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary empty the cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public deleteCart(options?: any) {
        return CartApiFp(this.configuration).deleteCart(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get all orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public getCart(options?: any) {
        return CartApiFp(this.configuration).getCart(options)(this.axios, this.basePath);
    }

}


/**
 * MealApi - axios parameter creator
 * @export
 */
export const MealApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Should only be carried by restaurant owner, and be logged in
         * @summary Create meal
         * @param {Meal} body Created meal object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeal(body: Meal, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createMeal.');
            }
            const localVarPath = `/meal`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary delete meal
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeal(mealName?: string, restaurantName?: string, mealID?: number, options: any = {}): RequestArgs {
            const localVarPath = `/meal`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mealName !== undefined) {
                localVarQueryParameter['mealName'] = mealName;
            }

            if (restaurantName !== undefined) {
                localVarQueryParameter['restaurantName'] = restaurantName;
            }

            if (mealID !== undefined) {
                localVarQueryParameter['mealID'] = mealID;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get meal by {meal name + restaurant name} or {meal id}
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeal(mealName?: string, restaurantName?: string, mealID?: number, options: any = {}): RequestArgs {
            const localVarPath = `/meal`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mealName !== undefined) {
                localVarQueryParameter['mealName'] = mealName;
            }

            if (restaurantName !== undefined) {
                localVarQueryParameter['restaurantName'] = restaurantName;
            }

            if (mealID !== undefined) {
                localVarQueryParameter['mealID'] = mealID;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary Update meal
         * @param {Meal} body Updated meal object
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeal(body: Meal, mealName?: string, restaurantName?: string, mealID?: number, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateMeal.');
            }
            const localVarPath = `/meal`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mealName !== undefined) {
                localVarQueryParameter['mealName'] = mealName;
            }

            if (restaurantName !== undefined) {
                localVarQueryParameter['restaurantName'] = restaurantName;
            }

            if (mealID !== undefined) {
                localVarQueryParameter['mealID'] = mealID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealApi - functional programming interface
 * @export
 */
export const MealApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Should only be carried by restaurant owner, and be logged in
         * @summary Create meal
         * @param {Meal} body Created meal object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeal(body: Meal, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = MealApiAxiosParamCreator(configuration).createMeal(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary delete meal
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeal(mealName?: string, restaurantName?: string, mealID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = MealApiAxiosParamCreator(configuration).deleteMeal(mealName, restaurantName, mealID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get meal by {meal name + restaurant name} or {meal id}
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeal(mealName?: string, restaurantName?: string, mealID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Meal> {
            const localVarAxiosArgs = MealApiAxiosParamCreator(configuration).getMeal(mealName, restaurantName, mealID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary Update meal
         * @param {Meal} body Updated meal object
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeal(body: Meal, mealName?: string, restaurantName?: string, mealID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = MealApiAxiosParamCreator(configuration).updateMeal(body, mealName, restaurantName, mealID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MealApi - factory interface
 * @export
 */
export const MealApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Should only be carried by restaurant owner, and be logged in
         * @summary Create meal
         * @param {Meal} body Created meal object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeal(body: Meal, options?: any) {
            return MealApiFp(configuration).createMeal(body, options)(axios, basePath);
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary delete meal
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeal(mealName?: string, restaurantName?: string, mealID?: number, options?: any) {
            return MealApiFp(configuration).deleteMeal(mealName, restaurantName, mealID, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get meal by {meal name + restaurant name} or {meal id}
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeal(mealName?: string, restaurantName?: string, mealID?: number, options?: any) {
            return MealApiFp(configuration).getMeal(mealName, restaurantName, mealID, options)(axios, basePath);
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary Update meal
         * @param {Meal} body Updated meal object
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeal(body: Meal, mealName?: string, restaurantName?: string, mealID?: number, options?: any) {
            return MealApiFp(configuration).updateMeal(body, mealName, restaurantName, mealID, options)(axios, basePath);
        },
    };
};

/**
 * MealApi - object-oriented interface
 * @export
 * @class MealApi
 * @extends {BaseAPI}
 */
export class MealApi extends BaseAPI {
    /**
     * Should only be carried by restaurant owner, and be logged in
     * @summary Create meal
     * @param {Meal} body Created meal object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealApi
     */
    public createMeal(body: Meal, options?: any) {
        return MealApiFp(this.configuration).createMeal(body, options)(this.axios, this.basePath);
    }

    /**
     * This can only be done by the logged in user. and be a restaurant owner
     * @summary delete meal
     * @param {string} [mealName] The name that needs to be fetched.
     * @param {string} [restaurantName] name of restaurant that serves that meal
     * @param {number} [mealID] ID of meal to fetch instead of name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealApi
     */
    public deleteMeal(mealName?: string, restaurantName?: string, mealID?: number, options?: any) {
        return MealApiFp(this.configuration).deleteMeal(mealName, restaurantName, mealID, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get meal by {meal name + restaurant name} or {meal id}
     * @param {string} [mealName] The name that needs to be fetched.
     * @param {string} [restaurantName] name of restaurant that serves that meal
     * @param {number} [mealID] ID of meal to fetch instead of name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealApi
     */
    public getMeal(mealName?: string, restaurantName?: string, mealID?: number, options?: any) {
        return MealApiFp(this.configuration).getMeal(mealName, restaurantName, mealID, options)(this.axios, this.basePath);
    }

    /**
     * This can only be done by the logged in user. and be a restaurant owner
     * @summary Update meal
     * @param {Meal} body Updated meal object
     * @param {string} [mealName] The name that needs to be fetched.
     * @param {string} [restaurantName] name of restaurant that serves that meal
     * @param {number} [mealID] ID of meal to fetch instead of name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealApi
     */
    public updateMeal(body: Meal, mealName?: string, restaurantName?: string, mealID?: number, options?: any) {
        return MealApiFp(this.configuration).updateMeal(body, mealName, restaurantName, mealID, options)(this.axios, this.basePath);
    }

}


/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create order
         * @param {Meal} body Created order object
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(body: Meal, mealName?: string, restaurantName?: string, mealID?: number, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOrder.');
            }
            const localVarPath = `/meal/order`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mealName !== undefined) {
                localVarQueryParameter['mealName'] = mealName;
            }

            if (restaurantName !== undefined) {
                localVarQueryParameter['restaurantName'] = restaurantName;
            }

            if (mealID !== undefined) {
                localVarQueryParameter['mealID'] = mealID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete order
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {number} [orderID] ID of order to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(mealName?: string, restaurantName?: string, mealID?: number, orderID?: number, options: any = {}): RequestArgs {
            const localVarPath = `/meal/order`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mealName !== undefined) {
                localVarQueryParameter['mealName'] = mealName;
            }

            if (restaurantName !== undefined) {
                localVarQueryParameter['restaurantName'] = restaurantName;
            }

            if (mealID !== undefined) {
                localVarQueryParameter['mealID'] = mealID;
            }

            if (orderID !== undefined) {
                localVarQueryParameter['orderID'] = orderID;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get order by {meal name + restaurant name} or {meal id}
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(mealName?: string, restaurantName?: string, mealID?: number, options: any = {}): RequestArgs {
            const localVarPath = `/meal/order`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mealName !== undefined) {
                localVarQueryParameter['mealName'] = mealName;
            }

            if (restaurantName !== undefined) {
                localVarQueryParameter['restaurantName'] = restaurantName;
            }

            if (mealID !== undefined) {
                localVarQueryParameter['mealID'] = mealID;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary Update meal
         * @param {Order} body Updated meal object
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {number} [orderID] ID of order to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(body: Order, mealName?: string, restaurantName?: string, mealID?: number, orderID?: number, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrder.');
            }
            const localVarPath = `/meal/order`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mealName !== undefined) {
                localVarQueryParameter['mealName'] = mealName;
            }

            if (restaurantName !== undefined) {
                localVarQueryParameter['restaurantName'] = restaurantName;
            }

            if (mealID !== undefined) {
                localVarQueryParameter['mealID'] = mealID;
            }

            if (orderID !== undefined) {
                localVarQueryParameter['orderID'] = orderID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create order
         * @param {Meal} body Created order object
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(body: Meal, mealName?: string, restaurantName?: string, mealID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrderApiAxiosParamCreator(configuration).createOrder(body, mealName, restaurantName, mealID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete order
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {number} [orderID] ID of order to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(mealName?: string, restaurantName?: string, mealID?: number, orderID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrderApiAxiosParamCreator(configuration).deleteOrder(mealName, restaurantName, mealID, orderID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get order by {meal name + restaurant name} or {meal id}
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(mealName?: string, restaurantName?: string, mealID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order> {
            const localVarAxiosArgs = OrderApiAxiosParamCreator(configuration).getOrder(mealName, restaurantName, mealID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary Update meal
         * @param {Order} body Updated meal object
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {number} [orderID] ID of order to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(body: Order, mealName?: string, restaurantName?: string, mealID?: number, orderID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrderApiAxiosParamCreator(configuration).updateOrder(body, mealName, restaurantName, mealID, orderID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create order
         * @param {Meal} body Created order object
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(body: Meal, mealName?: string, restaurantName?: string, mealID?: number, options?: any) {
            return OrderApiFp(configuration).createOrder(body, mealName, restaurantName, mealID, options)(axios, basePath);
        },
        /**
         * 
         * @summary delete order
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {number} [orderID] ID of order to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(mealName?: string, restaurantName?: string, mealID?: number, orderID?: number, options?: any) {
            return OrderApiFp(configuration).deleteOrder(mealName, restaurantName, mealID, orderID, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get order by {meal name + restaurant name} or {meal id}
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(mealName?: string, restaurantName?: string, mealID?: number, options?: any) {
            return OrderApiFp(configuration).getOrder(mealName, restaurantName, mealID, options)(axios, basePath);
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary Update meal
         * @param {Order} body Updated meal object
         * @param {string} [mealName] The name that needs to be fetched.
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [mealID] ID of meal to fetch instead of name
         * @param {number} [orderID] ID of order to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(body: Order, mealName?: string, restaurantName?: string, mealID?: number, orderID?: number, options?: any) {
            return OrderApiFp(configuration).updateOrder(body, mealName, restaurantName, mealID, orderID, options)(axios, basePath);
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @summary Create order
     * @param {Meal} body Created order object
     * @param {string} [mealName] The name that needs to be fetched.
     * @param {string} [restaurantName] name of restaurant that serves that meal
     * @param {number} [mealID] ID of meal to fetch instead of name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public createOrder(body: Meal, mealName?: string, restaurantName?: string, mealID?: number, options?: any) {
        return OrderApiFp(this.configuration).createOrder(body, mealName, restaurantName, mealID, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary delete order
     * @param {string} [mealName] The name that needs to be fetched.
     * @param {string} [restaurantName] name of restaurant that serves that meal
     * @param {number} [mealID] ID of meal to fetch instead of name
     * @param {number} [orderID] ID of order to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public deleteOrder(mealName?: string, restaurantName?: string, mealID?: number, orderID?: number, options?: any) {
        return OrderApiFp(this.configuration).deleteOrder(mealName, restaurantName, mealID, orderID, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get order by {meal name + restaurant name} or {meal id}
     * @param {string} [mealName] The name that needs to be fetched.
     * @param {string} [restaurantName] name of restaurant that serves that meal
     * @param {number} [mealID] ID of meal to fetch instead of name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getOrder(mealName?: string, restaurantName?: string, mealID?: number, options?: any) {
        return OrderApiFp(this.configuration).getOrder(mealName, restaurantName, mealID, options)(this.axios, this.basePath);
    }

    /**
     * This can only be done by the logged in user. and be a restaurant owner
     * @summary Update meal
     * @param {Order} body Updated meal object
     * @param {string} [mealName] The name that needs to be fetched.
     * @param {string} [restaurantName] name of restaurant that serves that meal
     * @param {number} [mealID] ID of meal to fetch instead of name
     * @param {number} [orderID] ID of order to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public updateOrder(body: Order, mealName?: string, restaurantName?: string, mealID?: number, orderID?: number, options?: any) {
        return OrderApiFp(this.configuration).updateOrder(body, mealName, restaurantName, mealID, orderID, options)(this.axios, this.basePath);
    }

}


/**
 * RestaurantApi - axios parameter creator
 * @export
 */
export const RestaurantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Should only be carried by restaurant owner, and be logged in
         * @summary Create restaurant
         * @param {Restaurant} body Created restaurant object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRestaurant(body: Restaurant, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createRestaurant.');
            }
            const localVarPath = `/restaruant`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary delete restaurant
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [restaurantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurant(restaurantName?: string, restaurantID?: number, options: any = {}): RequestArgs {
            const localVarPath = `/restaruant`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (restaurantName !== undefined) {
                localVarQueryParameter['restaurantName'] = restaurantName;
            }

            if (restaurantID !== undefined) {
                localVarQueryParameter['restaurantID'] = restaurantID;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get restaurant by name or byid
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [restaurantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurant(restaurantName?: string, restaurantID?: number, options: any = {}): RequestArgs {
            const localVarPath = `/restaruant`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (restaurantName !== undefined) {
                localVarQueryParameter['restaurantName'] = restaurantName;
            }

            if (restaurantID !== undefined) {
                localVarQueryParameter['restaurantID'] = restaurantID;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary Update restaurant
         * @param {Restaurant} body Updated meal object
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [restaurantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurant(body: Restaurant, restaurantName?: string, restaurantID?: number, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateRestaurant.');
            }
            const localVarPath = `/restaruant`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (restaurantName !== undefined) {
                localVarQueryParameter['restaurantName'] = restaurantName;
            }

            if (restaurantID !== undefined) {
                localVarQueryParameter['restaurantID'] = restaurantID;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestaurantApi - functional programming interface
 * @export
 */
export const RestaurantApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Should only be carried by restaurant owner, and be logged in
         * @summary Create restaurant
         * @param {Restaurant} body Created restaurant object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRestaurant(body: Restaurant, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RestaurantApiAxiosParamCreator(configuration).createRestaurant(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary delete restaurant
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [restaurantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurant(restaurantName?: string, restaurantID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RestaurantApiAxiosParamCreator(configuration).deleteRestaurant(restaurantName, restaurantID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get restaurant by name or byid
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [restaurantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurant(restaurantName?: string, restaurantID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Restaurant> {
            const localVarAxiosArgs = RestaurantApiAxiosParamCreator(configuration).getRestaurant(restaurantName, restaurantID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary Update restaurant
         * @param {Restaurant} body Updated meal object
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [restaurantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurant(body: Restaurant, restaurantName?: string, restaurantID?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RestaurantApiAxiosParamCreator(configuration).updateRestaurant(body, restaurantName, restaurantID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RestaurantApi - factory interface
 * @export
 */
export const RestaurantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Should only be carried by restaurant owner, and be logged in
         * @summary Create restaurant
         * @param {Restaurant} body Created restaurant object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRestaurant(body: Restaurant, options?: any) {
            return RestaurantApiFp(configuration).createRestaurant(body, options)(axios, basePath);
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary delete restaurant
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [restaurantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurant(restaurantName?: string, restaurantID?: number, options?: any) {
            return RestaurantApiFp(configuration).deleteRestaurant(restaurantName, restaurantID, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get restaurant by name or byid
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [restaurantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurant(restaurantName?: string, restaurantID?: number, options?: any) {
            return RestaurantApiFp(configuration).getRestaurant(restaurantName, restaurantID, options)(axios, basePath);
        },
        /**
         * This can only be done by the logged in user. and be a restaurant owner
         * @summary Update restaurant
         * @param {Restaurant} body Updated meal object
         * @param {string} [restaurantName] name of restaurant that serves that meal
         * @param {number} [restaurantID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurant(body: Restaurant, restaurantName?: string, restaurantID?: number, options?: any) {
            return RestaurantApiFp(configuration).updateRestaurant(body, restaurantName, restaurantID, options)(axios, basePath);
        },
    };
};

/**
 * RestaurantApi - object-oriented interface
 * @export
 * @class RestaurantApi
 * @extends {BaseAPI}
 */
export class RestaurantApi extends BaseAPI {
    /**
     * Should only be carried by restaurant owner, and be logged in
     * @summary Create restaurant
     * @param {Restaurant} body Created restaurant object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantApi
     */
    public createRestaurant(body: Restaurant, options?: any) {
        return RestaurantApiFp(this.configuration).createRestaurant(body, options)(this.axios, this.basePath);
    }

    /**
     * This can only be done by the logged in user. and be a restaurant owner
     * @summary delete restaurant
     * @param {string} [restaurantName] name of restaurant that serves that meal
     * @param {number} [restaurantID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantApi
     */
    public deleteRestaurant(restaurantName?: string, restaurantID?: number, options?: any) {
        return RestaurantApiFp(this.configuration).deleteRestaurant(restaurantName, restaurantID, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get restaurant by name or byid
     * @param {string} [restaurantName] name of restaurant that serves that meal
     * @param {number} [restaurantID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantApi
     */
    public getRestaurant(restaurantName?: string, restaurantID?: number, options?: any) {
        return RestaurantApiFp(this.configuration).getRestaurant(restaurantName, restaurantID, options)(this.axios, this.basePath);
    }

    /**
     * This can only be done by the logged in user. and be a restaurant owner
     * @summary Update restaurant
     * @param {Restaurant} body Updated meal object
     * @param {string} [restaurantName] name of restaurant that serves that meal
     * @param {number} [restaurantID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantApi
     */
    public updateRestaurant(body: Restaurant, restaurantName?: string, restaurantID?: number, options?: any) {
        return RestaurantApiFp(this.configuration).updateRestaurant(body, restaurantName, restaurantID, options)(this.axios, this.basePath);
    }

}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create user
         * @param {User} body Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: User, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {string} username The name that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(username: string, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by user name
         * @param {string} username The name that needs to be fetched. Use user1 for testing. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName(username: string, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getUserByName.');
            }
            const localVarPath = `/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(username: string, password: string, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling loginUser.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling loginUser.');
            }
            const localVarPath = `/user/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(options: any = {}): RequestArgs {
            const localVarPath = `/user/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {string} username name that need to be updated
         * @param {User} body Updated user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(username: string, body: User, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling updateUser.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUser.');
            }
            const localVarPath = `/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create user
         * @param {User} body Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: User, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).createUser(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {string} username The name that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(username: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).deleteUser(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get user by user name
         * @param {string} username The name that needs to be fetched. Use user1 for testing. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName(username: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).getUserByName(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(username: string, password: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).loginUser(username, password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).logoutUser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {string} username name that need to be updated
         * @param {User} body Updated user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(username: string, body: User, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).updateUser(username, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create user
         * @param {User} body Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: User, options?: any) {
            return UserApiFp(configuration).createUser(body, options)(axios, basePath);
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {string} username The name that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(username: string, options?: any) {
            return UserApiFp(configuration).deleteUser(username, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get user by user name
         * @param {string} username The name that needs to be fetched. Use user1 for testing. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName(username: string, options?: any) {
            return UserApiFp(configuration).getUserByName(username, options)(axios, basePath);
        },
        /**
         * 
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(username: string, password: string, options?: any) {
            return UserApiFp(configuration).loginUser(username, password, options)(axios, basePath);
        },
        /**
         * 
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(options?: any) {
            return UserApiFp(configuration).logoutUser(options)(axios, basePath);
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {string} username name that need to be updated
         * @param {User} body Updated user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(username: string, body: User, options?: any) {
            return UserApiFp(configuration).updateUser(username, body, options)(axios, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Create user
     * @param {User} body Created user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(body: User, options?: any) {
        return UserApiFp(this.configuration).createUser(body, options)(this.axios, this.basePath);
    }

    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param {string} username The name that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(username: string, options?: any) {
        return UserApiFp(this.configuration).deleteUser(username, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get user by user name
     * @param {string} username The name that needs to be fetched. Use user1 for testing. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserByName(username: string, options?: any) {
        return UserApiFp(this.configuration).getUserByName(username, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Logs user into the system
     * @param {string} username The user name for login
     * @param {string} password The password for login in clear text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public loginUser(username: string, password: string, options?: any) {
        return UserApiFp(this.configuration).loginUser(username, password, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Logs out current logged in user session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public logoutUser(options?: any) {
        return UserApiFp(this.configuration).logoutUser(options)(this.axios, this.basePath);
    }

    /**
     * This can only be done by the logged in user.
     * @summary Updated user
     * @param {string} username name that need to be updated
     * @param {User} body Updated user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(username: string, body: User, options?: any) {
        return UserApiFp(this.configuration).updateUser(username, body, options)(this.axios, this.basePath);
    }

}


