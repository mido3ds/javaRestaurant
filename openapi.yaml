openapi: 3.0.1
info:
  title: JavaRestaurant API
  version: 0.1.0
paths:
  # USER
  /user:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: invlaid username
          content: {}
        "401":
          description: invalid password
          content: {}
      x-codegen-request-body-name: body
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
          content: {}
        "404":
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Invalid user supplied
          content: {}
        "404":
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Invalid username supplied
          content: {}
        "404":
          description: User not found
          content: {}
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  # MEAL
  /meal: # TODO
    get:
      tags:
        - meal
      summary: Get meal by {meal name + restaurant name} or {meal id}
      operationId: getMeal
      parameters:
        - name: mealName
          in: query
          description: "The name that needs to be fetched."
          schema:
            type: string
        - name: restaurantName
          in: query
          description: "name of restaurant that serves that meal"
          schema:
            type: string
        - name: mealID
          in: query
          description: "ID of meal to fetch instead of name"
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Meal"
            application/json:
              schema:
                $ref: "#/components/schemas/Meal"
        "404":
          description: Meal not found
          content: {}
    post:
      tags:
        - meal
      summary: Create meal
      description: Should only be carried by restaurant owner, and be logged in
      operationId: createMeal
      requestBody:
        description: Created meal object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Meal"
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: not logged in/ not restaurant owner
          content: {}
        "401":
          description: invalid data
          content: {}
      x-codegen-request-body-name: body
    put:
      tags:
        - meal
      summary: Update meal
      description: This can only be done by the logged in user. and be a restaurant owner
      operationId: updateMeal
      parameters:
        - name: mealName
          in: query
          description: "The name that needs to be fetched."
          schema:
            type: string
        - name: restaurantName
          in: query
          description: "name of restaurant that serves that meal"
          schema:
            type: string
        - name: mealID
          in: query
          description: "ID of meal to fetch instead of name"
          schema:
            type: integer
      requestBody:
        description: Updated meal object
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Meal"
        required: true
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Invalid meal supplied
          content: {}
        "401":
          description: Not logged in
          content: {}
        "404":
          description: Meal not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - meal
      summary: delete meal
      description: This can only be done by the logged in user. and be a restaurant owner
      operationId: deleteMeal
      parameters:
        - name: mealName
          in: query
          description: "The name that needs to be fetched."
          schema:
            type: string
        - name: restaurantName
          in: query
          description: "name of restaurant that serves that meal"
          schema:
            type: string
        - name: mealID
          in: query
          description: "ID of meal to fetch instead of name"
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Invalid meal supplied
          content: {}
        "401":
          description: Not logged in
          content: {}
        "404":
          description: Meal not found
          content: {}
      x-codegen-request-body-name: body
  "/meal/order": # TODO
    get:
    post:
    delete:
  # CART
  /cart: # TODO
    get:
    delete:
  /cart/confirm: # TODO
    post:
  # RESTAURANT
  /restaruant: # TODO
    get:
    post:
    put:
    delete:
components:
  schemas:
    User:
      type: object
      properties:
        addresses:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Address"
        email:
          type: string
        firstname:
          type: string
        id:
          type: integer
        lastname:
          type: string
        password:
          type: string
        phone:
          type: string
        username:
          type: string
      title: User
    Address:
      type: object
      properties:
        city:
          type: string
        housenumber:
          type: integer
        street:
          type: string
      title: Address
    Order:
      type: "object"
      properties:
        id:
          type: "integer"
        mealID:
          type: "integer"
        numItems:
          type: "integer"
      title: "Order"
    Restaurant:
      type: "object"
      properties:
        id:
          type: "integer"
        img:
          type: "string"
        meals:
          type: "array"
          items:
            $ref: "#/components/schemas/Meal"
        name:
          type: "string"
      title: "Restaurant"
    Meal:
      type: "object"
      properties:
        id:
          type: "integer"
        img:
          type: "string"
        name:
          type: "string"
        price:
          type: "string"
      title: "Meal"
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
